---
AWSTemplateFormatVersion: "2010-09-09"

Description: "Creates a bucket to store uploaded files"

Parameters:
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
  AppDomain:
    Type: String
  FrontendWebsiteCertificate:
    Type: String
  BackendLambdaS3Bucket:
    Type: String
  BackendLambdaS3Key:
    Type: String
  VeypearPresenterBase:
    Type: String
  BackendJWTPrivateKey:
    Type: String
    NoEcho: true
  BackendJWTAudience:
    Type: String

Resources:
  VideoUploads:
    Type: "AWS::S3::Bucket"
    Properties:
      AccelerateConfiguration:
        AccelerationStatus: "Enabled"
      AccessControl: "Private"
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 2
          Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods:
            - "HEAD"
            - "GET"
            - "PUT"
            - "POST"
            AllowedOrigins: ["*"]
            ExposedHeaders:
            - "etag"
  
  BackendLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns: 
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
        - Principal:
            Service: 
            - "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
          Effect: "Allow"
  
  CanWriteToVideoUploads:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "WriteToVideoUploads"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action:
          - "s3:*"
          Resource:
          - !Sub "arn:aws:s3:::${VideoUploads}/*"
      Roles:
      - !Ref "BackendLambdaRole"
  
  CanReadFromSSM:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "CanReadFromSSM"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action:
          - "ssm:GetParameter"
          - "ssm:GetParameters"
          Resource:
          - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/multiview/mux/*"
      Roles:
      - !Ref "BackendLambdaRole"


  BackendPresenterInfoFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.presenterInfo
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs12.x"
      Timeout: 25
      Environment:
        Variables:
          UPLOADER_BUCKET: !Ref "VideoUploads"
          UPLOADER_JWT_PRIVATE_KEY: !Ref BackendJWTPrivateKey
          UPLOADER_JWT_AUDIENCE: !Ref BackendJWTAudience
          UPLOADER_PORTAL: !Ref "VeypearPresenterBase"

  BackendGetStreamFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.getStream
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs12.x"
      Timeout: 25
      Environment:
        Variables:
          UPLOADER_BUCKET: !Ref "VideoUploads"
          UPLOADER_JWT_PRIVATE_KEY: !Ref BackendJWTPrivateKey
          UPLOADER_JWT_AUDIENCE: !Ref BackendJWTAudience
          UPLOADER_PORTAL: !Ref "VeypearPresenterBase"

  BackendBeginUploadInfoFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.beginUpload
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs12.x"
      Timeout: 25
      Environment:
        Variables:
          UPLOADER_BUCKET: !Ref "VideoUploads"
          UPLOADER_JWT_PRIVATE_KEY: !Ref BackendJWTPrivateKey
          UPLOADER_JWT_AUDIENCE: !Ref BackendJWTAudience
          UPLOADER_PORTAL: !Ref "VeypearPresenterBase"

  BackendGetUploadURLFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.getUploadURL
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs12.x"
      Timeout: 25
      Environment:
        Variables:
          UPLOADER_BUCKET: !Ref "VideoUploads"
          UPLOADER_JWT_PRIVATE_KEY: !Ref BackendJWTPrivateKey
          UPLOADER_JWT_AUDIENCE: !Ref BackendJWTAudience
          UPLOADER_PORTAL: !Ref "VeypearPresenterBase"

  BackendFinishUploadFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.finishUpload
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs12.x"
      Timeout: 25
      Environment:
        Variables:
          UPLOADER_BUCKET: !Ref "VideoUploads"
          UPLOADER_JWT_PRIVATE_KEY: !Ref BackendJWTPrivateKey
          UPLOADER_JWT_AUDIENCE: !Ref BackendJWTAudience
          UPLOADER_PORTAL: !Ref "VeypearPresenterBase"
  
  BackendAbandonUploadFn:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BackendLambdaS3Bucket
        S3Key: !Ref BackendLambdaS3Key
      Handler: src/index.abandonUpload
      Role: !GetAtt "BackendLambdaRole.Arn"
      Runtime: "nodejs12.x"
      Timeout: 25
      Environment:
        Variables:
          UPLOADER_BUCKET: !Ref "VideoUploads"
          UPLOADER_JWT_PRIVATE_KEY: !Ref BackendJWTPrivateKey
          UPLOADER_JWT_AUDIENCE: !Ref BackendJWTAudience
          UPLOADER_PORTAL: !Ref "VeypearPresenterBase"
  
  BackendAPIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "apigateway.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: LambdaAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action: "lambda:*"
            Resource:
            - !GetAtt BackendPresenterInfoFn.Arn
            - !GetAtt BackendBeginUploadInfoFn.Arn
            - !GetAtt BackendGetUploadURLFn.Arn
            - !GetAtt BackendFinishUploadFn.Arn
            - !GetAtt BackendAbandonUploadFn.Arn
            - !GetAtt BackendGetStreamFn.Arn

  BackendAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      ProtocolType: HTTP
      Description: !Sub "${AWS::StackName} API"
      Name: !Sub "${AWS::StackName}-api"
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
        - "authorization"
        - "content-type"
        AllowMethods:
        - "POST"
        AllowOrigins:
        - "http://localhost:1234"
        - "https://nextdayvideo.com"
        - !Sub "https://${AppDomain}"

  BackendAPIDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - BackendPresenterInfoIntegration
    - BackendPresenterInfoRoute
    Properties:
      Description: !Sub "${AWS::StackName} API Deployment"
      ApiId: !Ref BackendAPI

  BackendAPIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      DeploymentId: !Ref BackendAPIDeployment
      Description: !Sub "${AWS::StackName} API v0"
      ApiId: !Ref BackendAPI
      StageName: "api"
      AutoDeploy: true

  BackendGetStreamIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "Get Stream"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendGetStreamFn.Arn}/invocations"

  BackendGetStreamRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: GET /stream/{muxTokenId}
      Target: !Sub "integrations/${BackendGetStreamIntegration}"

  BackendPresenterInfoIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "Presenter Info"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendPresenterInfoFn.Arn}/invocations"

  BackendPresenterInfoRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: POST /presenter/{presenter}
      Target: !Sub "integrations/${BackendPresenterInfoIntegration}"

  BackendBeginUploadInfoFnIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "Obtain token to upload a single file"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendBeginUploadInfoFn.Arn}/invocations"

  BackendBeginUploadInfoFnIntegrationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: POST /begin
      Target: !Sub "integrations/${BackendBeginUploadInfoFnIntegration}"

  BackendGetUploadURLFnIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "Obtain signed urls to upload individual pieces of the file"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendGetUploadURLFn.Arn}/invocations"

  BackendGetUploadURLFnIntegrationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: POST /part
      Target: !Sub "integrations/${BackendGetUploadURLFnIntegration}"

  BackendFinishUploadFnIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "Mark uploaded file as complete"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendFinishUploadFn.Arn}/invocations"

  BackendFinishUploadFnIntegrationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: POST /finish
      Target: !Sub "integrations/${BackendFinishUploadFnIntegration}"

  BackendAbandonUploadFnIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackendAPI
      Description: "Mark uploaded file as abandoned (reclaims S3 storage)"
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt "BackendAPIRole.Arn"
      PassthroughBehavior: "WHEN_NO_MATCH"
      TimeoutInMillis: 29000
      IntegrationMethod: "POST"
      IntegrationType: "AWS_PROXY"
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendAbandonUploadFn.Arn}/invocations"

  BackendAbandonUploadFnIntegrationRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackendAPI
      RouteKey: POST /abandon
      Target: !Sub "integrations/${BackendAbandonUploadFnIntegration}"

  FrontendWebsite:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "PublicRead"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "index.html"
  
  FrontendWebsiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref "FrontendWebsite"
      PolicyDocument:
        "Version": "2012-10-17"
        "Statement":
        - "Effect": "Allow"
          "Principal": "*"
          "Action":
          - "s3:GetObject"
          "Resource":
          - !Sub "arn:aws:s3:::${FrontendWebsite}/*"

  FrontendDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref AppDomain
        CacheBehaviors:
        - AllowedMethods:
          - "GET"
          - "HEAD"
          CachedMethods:
          - "GET"
          - "HEAD"
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # "Managed-CachingDisabled"
          Compress: true
          PathPattern: "index.html"
          TargetOriginId: !Sub "${AWS::StackName}-FrontendOrigin"
          ViewerProtocolPolicy: "redirect-to-https"
        - AllowedMethods:
          - "GET"
          - "HEAD"
          - "POST"
          - "OPTIONS"
          - "DELETE"
          - "PUT"
          - "PATCH"
          CachedMethods:
          - "GET"
          - "HEAD"
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # "Managed-CachingDisabled"
          Compress: true
          PathPattern: "/api/*"
          TargetOriginId: !Sub "${AWS::StackName}-BackendOrigin"
          ViewerProtocolPolicy: "redirect-to-https"
        DefaultRootObject: "index.html"
        DefaultCacheBehavior:
          AllowedMethods:
          - "GET"
          - "HEAD"
          CachedMethods:
          - "GET"
          - "HEAD"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # "Managed-CachingOptimized"
          Compress: true
          TargetOriginId: !Sub "${AWS::StackName}-FrontendOrigin"
          ViewerProtocolPolicy: "redirect-to-https"
        Enabled: true
        HttpVersion: "http2"
        IPV6Enabled: true
        Origins:
        - CustomOriginConfig:
            OriginProtocolPolicy: "http-only"
          DomainName: !Sub "${FrontendWebsite}.s3-website-${AWS::Region}.amazonaws.com"
          Id: !Sub "${AWS::StackName}-FrontendOrigin"
        - CustomOriginConfig:
            OriginProtocolPolicy: "https-only"
          DomainName: !Sub ${BackendAPI}.execute-api.${AWS::Region}.amazonaws.com
          Id: !Sub "${AWS::StackName}-BackendOrigin"
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref 'FrontendWebsiteCertificate'
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'

  SecondDNSIPv4:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt "FrontendDistribution.DomainName"
        HostedZoneId: "Z2FDTNDATAQYW2"
      HostedZoneId: !Ref "HostedZoneId"
      Name: !Ref "AppDomain"
      Type: "A"

  SecondDNSIPv6:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt "FrontendDistribution.DomainName"
        HostedZoneId: "Z2FDTNDATAQYW2"
      HostedZoneId: !Ref "HostedZoneId"
      Name: !Ref "AppDomain"
      Type: "AAAA"

Outputs:
  AcceleratedEndpoint:
    Value: !Sub "${VideoUploads}.s3-accelerate.amazonaws.com"
  FrontendURL:
    Value: !GetAtt "FrontendDistribution.DomainName"
  BackendPresenterInfoFn:
    Value: !GetAtt "BackendPresenterInfoFn.Arn"
  FrontendWebsiteBucket:
    Value: !Ref "FrontendWebsite"
